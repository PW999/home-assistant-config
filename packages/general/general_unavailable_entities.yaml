###################################################################################################
## Package - Unavailable Entities Sensor
## Count and list entities with a state of unavailable or unknown
## Home Assistant v2022.5 required. See README for customization options.
## https://github.com/jazzyisj/unavailable-entities-sensor/blob/main/README.md
###################################################################################################

# REQUIRED - This is the template sensor

template:
  - sensor:
      - name: "Unavailable Entities"
        unique_id: general_unavailable_entities
        icon: "{{ iif(states(this.entity_id)|int(0) > 0,'mdi:alert-circle','mdi:check-circle') }}"
        unit_of_measurement: entities
        state: >
          {% set entities = state_attr(this.entity_id,'entity_id') %}
          {% if entities != none %} {{ entities|count }} {% endif %}
        attributes:
          entity_id: >
            {% set ignore_seconds = 7200 %}
            {% set ignored = state_attr('group.ignored_unavailable_entities','entity_id') %}
            {% set ignore_ts = (now().timestamp() - ignore_seconds)|as_datetime %}
            {% set entities = states|rejectattr('domain','in',['group','button','number', 'select', 'input_boolean', 'scene', 'input_boolean', 'update', 'device_tracker'])
                |rejectattr('last_changed','ge',ignore_ts)
                |selectattr('state','in',['unavailable','unknown']) %}
            {% if ignored != none %}
              {% set entities =  entities|rejectattr('entity_id','in',ignored) %}
            {% endif %}
            {{ entities|map(attribute='entity_id')|list }}

# OPTIONAL - Uncomment and add entities you want to ignore to this group.

group:
  ignored_unavailable_entities:
    entities:
      - sensor.gas_consumption_2
      - binary_sensor.updater
      # Some unreliable (external) entities that are nice to have
      - sensor.pm2_5
      - sensor.pm2_5_2
      - sensor.pm2_5_3
      - sensor.pm10
      - sensor.pm10_2
      - sensor.pm10_3
      - air_quality.weather_in_ekeren_in_port_of_antwerp
      # These aren't really "connected", so they disappear from time to time
      - sensor.lightify_switch_mini_26_battery_level
      - sensor.lightify_switch_mini_27_battery_level

# OPTIONAL Example automation to demonstrate how you can utilize this sensor
automation:
  - id: general_unavailable_entities_notification
    alias: Notification - Unavailable Entities Notification
    description: Create persistent notification if unavailable entities, dismiss if none.
    mode: restart
    trigger:
      - platform: state
        entity_id: sensor.unavailable_entities
        attribute: entity_id
        to: ~
    condition:
      - condition: template
        value_template: >
          {{ is_number(trigger.from_state.state)
              and is_number(trigger.to_state.state) }}
    action:
      - if:
          - condition: numeric_state
            entity_id: sensor.unavailable_entities
            below: 1
        then:
          - service: persistent_notification.dismiss
            data:
              notification_id: unavailable_entities
        else:
          # - service: persistent_notification.create
          #   data:
          #     notification_id: unavailable_entities
          #     title: "Unavailable Entities"
          #     message: "- {{ state_attr('sensor.unavailable_entities','entity_id')|join('\n- ') }}"
          - service: notify.mobile_app_pwxperia10iv
            data:
              message: |
                - {{ state_attr('sensor.unavailable_entities','entity_id')|join('\n- ') }}
              title: Unavailable entities

          # OPTIONAL Detailed notifcation message example courtesy of @ThomDietrich

          - service: persistent_notification.create
            data:
              notification_id: unavailable_entities
              title: "Unavailable Entities"
              message: >
                {% set ns = namespace(result=[]) %}
                {% for s in expand(state_attr('sensor.unavailable_entities', 'entity_id')) %}
                  {% set ns.result = ns.result + [
                      "**" ~ s.name ~ "**\n"
                      ~ "- *entity_id*: " ~ s.entity_id ~ "\n"
                      ~ "- *state*: " ~ s.state ~ "\n"
                    ]
                  %}
                {% endfor %}
                {% set ns.result = ns.result | sort %}
                {{ ns.result | join('\n') }}
