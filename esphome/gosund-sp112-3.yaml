---
# dish washer
substitutions:
  plug_name: gosund-sp112-3
  plug_id: gosund_sp112_3
  ip: 192.168.0.65
  # Higher value gives lower watt readout
  current_res: "0.00200"
  # Lower value gives lower voltage readout
  voltage_div: "755"
  comment: Dishwasher switch


esphome:
  name: ${plug_name}
  comment: ${comment}
  on_boot:
    then:
      switch.turn_on: ${plug_id}_relay

preferences:
  flash_write_interval: 60min

esp8266:
  board: esp01_1m
  restore_from_flash: true
  framework:
    version: recommended

# WiFi connection
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true
  reboot_timeout: 12h
  power_save_mode: high
  manual_ip:
    static_ip: ${ip}
    gateway: 192.168.0.2
    subnet: 255.255.255.0

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${plug_name} Fallback Hotspot"
    password: !secret ap_password
    ap_timeout: 15min

# captive_portal:

# Enable logging
#logger:
#  logs:
#    sensor: INFO
#    adc: INFO
#    hlw8012: INFO

# Enable Home Assistant API
api:
  reboot_timeout: 14h
  encryption:
    key: !secret encryption_key

ota:
  password: !secret ota_password

time:
  - platform: homeassistant
    id: homeassistant_time

# Enable Web server
# web_server:
#   port: 80

status_led:
  pin:
    number: GPIO02
    inverted: true

output:
  # Relay state led
  - platform: esp8266_pwm
    id: ${plug_id}_state_led
    pin:
      number: GPIO0
      inverted: true

light:
  # Relay state light
  - platform: monochromatic
    output: ${plug_id}_state_led
    id: ${plug_id}_led
    restore_mode: ALWAYS_ON 


switch:
- platform: gpio
  name: ${plug_name} Main relay
  id: ${plug_id}_relay
  restore_mode: ALWAYS_ON 
  pin: GPIO14
  on_turn_on:
    - light.turn_on: ${plug_id}_led
  on_turn_off:
    - light.turn_off: ${plug_id}_led
    
    
- platform: gpio
  name: ${plug_name} USB
  id: ${plug_id}_usb
  pin:
    number: GPIO13
    inverted:  true

binary_sensor:
- platform: template
  id: ${plug_id}_button
  # read analog sensor and convert it's value to binary state
  lambda: return (id(${plug_id}_button_adc).state < .5);
  on_click:
  # short button press toggles mains
  - min_length: 10ms
    max_length: 1000ms
    then:
    - switch.toggle: ${plug_id}_relay
  # long button press toggles USB
  - min_length: 1000ms
    max_length: 3000ms
    then:
    - switch.toggle: ${plug_id}_usb

sensor:
- platform: adc
  id: ${plug_id}_button_adc
  pin: A0
  update_interval: .1s
- platform: hlw8012
  sel_pin:
    number: GPIO12
    inverted: True
  cf_pin: GPIO05
  cf1_pin: GPIO04
  current_resistor: ${current_res}
  voltage_divider: ${voltage_div}
  change_mode_every: 3
  update_interval: 5s
  # Current sensor
  current:
    id: ${plug_id}_current
    name: ${plug_name} Current
    unit_of_measurement: A
    accuracy_decimals: 2
    filters:
      # Map from sensor -> measured value
      - calibrate_linear:
        - 0.0 -> 0.0
        - 0.12 -> 0.085
        - 5.89 -> 9.3
      - lambda: if (x < 0.01) return 0; else return x;
      - sliding_window_moving_average:
          window_size: 5
          send_every: 12
  # Voltage sensor
  voltage:
    id: ${plug_id}_voltage
    name: ${plug_name} Voltage
    unit_of_measurement: V
    accuracy_decimals: 0
    filters:
      # Map from sensor -> measured value
      - calibrate_linear:
        - 0.0 -> 0.0
        - 249 -> 236
      - throttle: 120s
  # Power sensor
  power:
    id: ${plug_id}_wattage
    name: ${plug_name} Wattage
    unit_of_measurement: W
    accuracy_decimals: 1
    filters:
      # Map from sensor -> measured value
      - calibrate_linear:
        - 0 -> 0
        - 28.9 -> 24.5
        - 44.5 -> 37.5
        - 839 -> 703
        - 2592 -> 2180
      # Add the power consumtion of the plug
      - lambda: |
          if (id(${plug_id}_relay).state)
            if (x < 0)
              return 1.0;
            else
              return 1.0 + x;
          else
            if (x < 0)
              return 0.6;
            else 
              return 0.6 + x;
      - sliding_window_moving_average:
          window_size: 3
          send_every: 5
  energy:
    id: ${plug_id}_total_energy
    name: ${plug_name} Consumption

- platform: total_daily_energy
  name: ${plug_name} Total Daily Energy Consumption
  power_id: ${plug_id}_wattage
  id: ${plug_id}_total_daily_energy
  filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001
  unit_of_measurement: kWh
  device_class: energy
  
- platform: wifi_signal
  name: "${plug_name} RSSI"
  update_interval: 120s
  unit_of_measurement: dBm
